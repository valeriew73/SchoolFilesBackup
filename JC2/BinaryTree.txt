// Declare a record structure for type node
// Declare an array of type node

TYPE Node 
    DECLARE LeftPointer : INTEGER
    DECLARE Data : INTEGER
    DECLARE RightPointer : INTEGER
ENDTYPE

DECLARE BinaryTree : ARRAY[0:9] OF Node
DECLARE RootPointer, FreePointer : INTEGER

RootPointer <- 0
FreePointer <- 0

FOR i <- 0 TO 9 STEP 1
    BinaryTree[i].LeftPointer <- -1
    BinaryTree[i].Data <- i + 1
    BinaryTree[i].RightPointer <- -1
NEXT i
BinaryTree[9] <- -1

// 1. Check if there's a free location 
// 2. Check RootPointer to see if there's a root node

FUNCTION searchval(val_to_search) RETURNS INTEGER
    node_index  <- RootPointer
    WHILE node_index <> -1 and val_to_search <> BinaryTree[node_index].Data
        DO
            IF val_to_search < BinaryTree[node_index][1]
                THEN
                    node_index  <- BinaryTree[node_index].LeftPointer
                ELSE
                    node_index  <- BinaryTree[node_index].RightPointer
            ENDIF
    ENDWHILE
    RETURN node_index 
ENDFUNCTION

OUTPUT "Please enter a value to search: "
INPUT val_to_search
OUTPUT searchval(val_to_search)

PROCEDURE tree_insert(insert_ele)
    // Check if there's enough space in the tree (if free pointer = -1: tree is full)
    IF free_pointer = -1
        THEN
            print("The binary tree is full, cannot insert an element.")
        ELSE
            new_ele_pointer <- free_pointer
            free_pointer <- binary_tree[new_ele_pointer][1]
            ele_pointer <- root_pointer
        IF root_pointer = -1
            THEN
                root_pointer <- new_ele_pointer
        else:
            while item_pointer != -1:
                previous_pointer = item_pointer
                if element < binary_tree[item_pointer][1]:
                    left = True
                    item_pointer = binary_tree[item_pointer][0]
                elif element > binary_tree[item_pointer][1]:
                    left = False
                    item_pointer = binary_tree[item_pointer][2]
            if left == True:
                binary_tree[previous_pointer][0] = new_item_pointer
            else: binary_tree[previous_pointer][2] = new_item_pointer
        
        binary_tree[new_item_pointer][1] = element